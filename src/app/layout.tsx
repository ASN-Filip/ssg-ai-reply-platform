import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Header from "../components/Header";
import Footer from "../components/Footer";
import ClientAuthGate from '@/components/ClientAuthGate'
import { isAuthenticated } from '@/lib/guards.server'
import { headers } from 'next/headers'
import { redirect } from 'next/navigation'

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // Allow the sign-in page and NextAuth API routes to be public
  const hdrs = await headers()
  const hostUrl = hdrs.get('x-invoke-path') || hdrs.get('x-request-url') || ''
  const path = hostUrl ? new URL(hostUrl).pathname : ''

  // If the hostUrl is not available (client-side navigation or missing header),
  // skip the server-side redirect to avoid an infinite redirect loop. The
  // client will handle navigation and auth state after hydrate.
  if (!hostUrl) {
    return (
      <html lang="en">
        <body
          suppressHydrationWarning
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
          {/* Client-side gate: renders children for allowed public routes (e.g. /signin),
             otherwise shows a loading skeleton while checking session and redirects */}
          <Header />
          <ClientAuthGate>
            {/* Place a no-op script to stabilize hydration */}
            <script dangerouslySetInnerHTML={{ __html: "// noop" }} />
            <main className="min-h-[60vh]">{children}</main>
          </ClientAuthGate>
          <Footer />
        </body>
      </html>
    )
  }

  // Check session server-side
  const isAuthApi = path.startsWith('/api/auth')
  const isSignIn = path === '/signin'

  const loggedIn = await isAuthenticated()
  if (!loggedIn && !isAuthApi && !isSignIn) redirect('/signin')

  return (
    <html lang="en">
      <body
        // suppress hydration mismatch warnings that can be triggered by
        // client-only mutations (browser extensions injecting attributes,
        // runtime-generated values, etc.). This prevents React from
        // complaining about attributes like `cz-shortcut-listen` that
        // differ between server and client.
        suppressHydrationWarning
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Header />
        <main className="min-h-[60vh]">{children}</main>
        <Footer />
      </body>
    </html>
  )
}
